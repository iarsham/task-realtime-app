definitions:
  entities.LoginRequest:
    properties:
      email:
        example: Kqg8Q@example.com
        type: string
      password:
        example: 1qaz2wsx
        maxLength: 32
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  entities.SignupRequest:
    properties:
      email:
        example: Kqg8Q@example.com
        type: string
      password:
        example: 1qaz2wsx
        maxLength: 32
        minLength: 8
        type: string
      username:
        example: johndoe
        type: string
    required:
    - email
    - password
    - username
    type: object
  helpers.AccessToken:
    properties:
      access-token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        type: string
    type: object
  helpers.BadRequest:
    properties:
      error:
        example: bad request
        type: string
    type: object
  helpers.EmailAlreadyExists:
    properties:
      error:
        example: email already exists
        type: string
    type: object
  helpers.InternalServerError:
    properties:
      error:
        example: internal server error
        type: string
    type: object
  helpers.InvalidPassword:
    properties:
      error:
        example: invalid password
        type: string
    type: object
  helpers.UserCreated:
    properties:
      response:
        example: user created successfully
        type: string
    type: object
  helpers.UserNotFound:
    properties:
      error:
        example: user not found
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: arshamdev2001@gmail.com
    name: Arsham Roshannejad
    url: arsham.cloudarshamdev2001@gmail.com
  description: API Server for Real-Time Task
  license:
    name: MIT
    url: https://www.mit.edu/~amini/LICENSE.md
  termsOfService: http://swagger.io/terms/
  title: Real-Time Task
  version: 0.1.0
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Login a user
      parameters:
      - description: login data
        in: body
        name: userRequest
        required: true
        schema:
          $ref: '#/definitions/entities.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helpers.AccessToken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.BadRequest'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helpers.InvalidPassword'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helpers.UserNotFound'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helpers.InternalServerError'
      summary: Login
      tags:
      - Auth
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: register data
        in: body
        name: userRequest
        required: true
        schema:
          $ref: '#/definitions/entities.SignupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/helpers.UserCreated'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.BadRequest'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/helpers.EmailAlreadyExists'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helpers.InternalServerError'
      summary: Register
      tags:
      - Auth
swagger: "2.0"
